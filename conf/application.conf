# This is the main configuration file for the application.
# https://www.playframework.com/documentation/latest/ConfigFile
# ~~~~~
# Play uses HOCON as its configuration file format.  HOCON has a number
# of advantages over other config formats, but there are two things that
# can be used when modifying settings.
#
# You can include other configuration files in this main application.conf file:
#include "extra-config.conf"
#
# You can declare variables and substitute for them:
#mykey = ${some.value}
#
# And if an environment variable exists when there is no other subsitution, then
# HOCON will fall back to substituting environment variable:
#mykey = ${JAVA_HOME}

## Application name and version
app {
    version   = "2.6.r5"
    name      = "play-java-seed"
    shortname = "pjs"
    fullname  = ${app.name} ${app.version}
    desc      = "Play Java Seed template"
}

## Spring's beans configuration file (relative with application's home directory)
spring.conf = "conf/spring/beans.xml"

## Secret key
# https://www.playframework.com/documentation/2.6.x/ApplicationSecret
# ~~~~~
# The secret key is used to sign Play's session cookie.
# This should be changed for production: generate new crypto create with command `playGenerateSecret`
play.http.secret.key = "$play_crypto_secret;format="random"$"

## Module settings
include "conf.d/modules.conf"

## Worker settings
include "conf.d/workers.conf"

play.assets {
    path = "/public"
    urlPrefix = "/assets"
}

## Akka
# https://www.playframework.com/documentation/latest/JavaAkka#Configuration
play.akka.config = "akka"
play.akka.actor-system = "application"
akka {
    scheduler {
        tick-duration   = 5ms
        ticks-per-wheel = 1024
    }

    actor {
        # https://playframework.com/documentation/2.6.x/ThreadPools
        default-dispatcher {
            # Throughput = 1 means "as fair as possible"
            throughput = 1
            executor = "fork-join-executor"
            fork-join-executor = {
                # Settings this to 1 instead of 3 seems to improve performance.
                parallelism-factor = 1.0
                parallelism-max = 64

                # Setting this to LIFO changes the fork-join-executor
                # to use a stack discipline for task scheduling. This usually
                # improves throughput at the cost of possibly increasing
                # latency and risking task starvation (which should be rare).
                # Setting to "FIFO" to use queue like peeking mode which "poll" or "LIFO" to use stack
                # like peeking mode which "pop".
                task-peeking-mode = FIFO
            }
        }

        # Thread pool for DB access (usually blocking IO)
        # Lookup with actorSystem.dispatchers().lookup("akka.actor.db-dispatcher")
        db-dispatcher {
            throughput = 1
            executor = "thread-pool-executor"
            thread-pool-executor {
                # Set this value to maximum total number of DB connections
                fixed-pool-size = 4
            }
        }

        # Thread pool for worker tasks
        # Lookup with actorSystem.dispatchers().lookup("akka.actor.worker-dispatcher")
        worker-dispatcher {
            throughput = 1
            executor = "thread-pool-executor"
            thread-pool-executor {
                core-pool-size-factor = 2.0
                core-pool-size-max = 64
            }
        }
    }
}

## Internationalization
# https://www.playframework.com/documentation/latest/JavaI18N
play.i18n.langs = [ "en", "vi" ]

## Filters
# https://www.playframework.com/documentation/latest/Filters
# ~~~~~
# Remember to enable filters in build.sbt:
# libraryDependencies += filters
play.http.filters = "filters.HttpFilters"
play.filters {
    ## CORS filter configuration
    # https://www.playframework.com/documentation/latest/CorsFilter
    # ~~~~~
    # CORS is a protocol that allows web applications to make requests from the browser
    # across different domains.
    # NOTE: You MUST apply the CORS configuration before the CSRF filter, as CSRF has
    # dependencies on CORS settings.
    cors {
        # Filter paths by a whitelist of path prefixes
        #pathPrefixes = ["/some/path", ...]

        # The allowed origins. If null, all origins are allowed.
        #allowedOrigins = ["http://www.example.com"]

        # The allowed HTTP methods. If null, all methods are allowed
        #allowedHttpMethods = ["GET", "POST"]
    }

    ## CSRF Filter
    # https://www.playframework.com/documentation/latest/JavaCsrf#Applying-a-global-CSRF-filter
    # ~~~~~
    # Play supports multiple methods for verifying that a request is not a CSRF request.
    # The primary mechanism is a CSRF token. This token gets placed either in the query string
    # or body of every form submitted, and also gets placed in the users session.
    # Play then verifies that both tokens are present and match.
    csrf {
        # Sets the cookie to be sent only over HTTPS
        #cookie.secure = true

        # Defaults to CSRFErrorHandler in the root package.
        #errorHandler = MyCSRFErrorHandler
    }

    ## Security headers filter configuration
    # https://www.playframework.com/documentation/latest/SecurityHeaders
    # ~~~~~
    # Defines security headers that prevent XSS attacks.
    # If enabled, then all options are set to the below configuration by default:
    headers {
        # The X-Frame-Options header. If null, the header is not set.
        #frameOptions = "DENY"

        # The X-XSS-Protection header. If null, the header is not set.
        #xssProtection = "1; mode=block"

        # The X-Content-Type-Options header. If null, the header is not set.
        #contentTypeOptions = "nosniff"

        # The X-Permitted-Cross-Domain-Policies header. If null, the header is not set.
        #permittedCrossDomainPolicies = "master-only"

        # The Content-Security-Policy header. If null, the header is not set.
        #contentSecurityPolicy = "default-src 'self'"
    }

    ## Allowed hosts filter configuration
    # https://www.playframework.com/documentation/latest/AllowedHostsFilter
    # ~~~~~
    # Play provides a filter that lets you configure which hosts can access your application.
    # This is useful to prevent cache poisoning attacks.
    hosts {
        # Allow requests to example.com, its subdomains, and localhost:9000.
        #allowed = [".example.com", "localhost:9000"]
    }
}
