# This is the main configuration file for the application.
# https://www.playframework.com/documentation/latest/ConfigFile
# ~~~~~
# Play uses HOCON as its configuration file format.  HOCON has a number
# of advantages over other config formats, but there are two things that
# can be used when modifying settings.
#
# You can include other configuration files in this main application.conf file:
#include "extra-config.conf"
#
# You can declare variables and substitute for them:
#mykey = \${some.value}
#
# And if an environment variable exists when there is no other subsitution, then
# HOCON will fall back to substituting environment variable:
#mykey = \${JAVA_HOME}

## Application name and version
app {
    version   = "0.1.0"
    name      = "$name$"
    shortname = "$shortname$"
    fullname  = "\${app.name} \${app.version}"
    desc      = "$desc$"
}

## Secret key
# http://www.playframework.com/documentation/latest/ApplicationSecret
# ~~~~~
# The secret key is used to sign Play's session cookie.
# This should be changed for production: generate new crypto create with command `playGenerateSecret`
play.crypto.secret = "$play_crypto_secret;format="random"$"

## Akka
# https://www.playframework.com/documentation/latest/JavaAkka#Configuration
play.akka.config = "akka"
play.akka.actor-system = "application"
akka {
    # Remember to add <logger name="akka.actor" level="INFO" /> to logback.xml and logback-prod.xml
    log-config-on-start = true
    jvm-exit-on-fatal-error = false
}

## Modules
# https://www.playframework.com/documentation/latest/Modules
# https://www.playframework.com/documentation/latest/GlobalSettings
# https://playframework.com/documentation/latest/ModuleDirectory
play.modules {
  # By default, Play will load any class called Module that is defined
  # in the root package (the "app" directory), or you can define them
  # explicitly below.
  # If there are any built-in modules that you want to disable, you can list them here.
  #enabled += my.application.Module
  #enabled += modules.registry.RegistryModule

  # If there are any built-in modules that you want to disable, you can list them here.
  #disabled += ""
}

## Internationalization
# https://www.playframework.com/documentation/latest/JavaI18N
play.i18n.langs = [ "en" ]

## Netty Provider
# https://www.playframework.com/documentation/latest/SettingsNetty
play.server.netty {
    # If you run Play on Linux, you can use Netty's native socket transport for higher performance with less garbage. Other option is "jdk"
    transport = "native"
    eventLoopThreads = 0
    maxInitialLineLength = 4096
    maxHeaderSize = 8192
    maxChunkSize = 8192
    log.wire = false
    option {
        SO_BACKLOG = 100
        child {
            SO_KEEPALIVE = false
            TCP_NODELAY = false
        }
    }
}

## WS (HTTP Client)
# https://www.playframework.com/documentation/2.5.x/JavaWS#Configuring-WS
# ~~~~~
# Remember to enable ws in build.sbt:
# libraryDependencies += javaWs
play.ws {
    followRedirects = true
  
    # Enable PlayWS to use proxy properties (such as: http.proxyHost, http.proxyPort, http.nonProxyHosts, https.proxyHost, https.proxyPort)
    # See: https://docs.oracle.com/javase/8/docs/technotes/guides/net/proxies.html
    useProxyProperties = true
    useragent = "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36"
    compressionEnabled = true
    timeout {
        connection = 5
        idle       = 10
        request    = 30
    }
  
    ahc.maxConnectionsTotal = 64

    ## WS SSL
    # https://www.playframework.com/documentation/latest/WsSSL
    ssl {
        #debug.handshake = true
        #trustManager = {
        #  stores = [
        #    { type = "JKS", path = "exampletrust.jks" }
        #  ]
        #}
    }
}

## Filters
# https://www.playframework.com/documentation/latest/Filters
# ~~~~~
# Remember to enable filters in build.sbt:
# libraryDependencies += filters
play.filters {
    ## CORS filter configuration
    # https://www.playframework.com/documentation/latest/CorsFilter
    # ~~~~~
    # CORS is a protocol that allows web applications to make requests from the browser
    # across different domains.
    # NOTE: You MUST apply the CORS configuration before the CSRF filter, as CSRF has
    # dependencies on CORS settings.
    cors {
        # Filter paths by a whitelist of path prefixes
        #pathPrefixes = ["/some/path", ...]

        # The allowed origins. If null, all origins are allowed.
        #allowedOrigins = ["http://www.example.com"]

        # The allowed HTTP methods. If null, all methods are allowed
        #allowedHttpMethods = ["GET", "POST"]
    }

    ## CSRF Filter
    # https://www.playframework.com/documentation/latest/JavaCsrf#Applying-a-global-CSRF-filter
    # ~~~~~
    # Play supports multiple methods for verifying that a request is not a CSRF request.
    # The primary mechanism is a CSRF token. This token gets placed either in the query string
    # or body of every form submitted, and also gets placed in the users session.
    # Play then verifies that both tokens are present and match.
    csrf {
        # Sets the cookie to be sent only over HTTPS
        #cookie.secure = true

        # Defaults to CSRFErrorHandler in the root package.
        #errorHandler = MyCSRFErrorHandler
    }

    ## Security headers filter configuration
    # https://www.playframework.com/documentation/latest/SecurityHeaders
    # ~~~~~
    # Defines security headers that prevent XSS attacks.
    # If enabled, then all options are set to the below configuration by default:
    headers {
        # The X-Frame-Options header. If null, the header is not set.
        #frameOptions = "DENY"

        # The X-XSS-Protection header. If null, the header is not set.
        #xssProtection = "1; mode=block"

        # The X-Content-Type-Options header. If null, the header is not set.
        #contentTypeOptions = "nosniff"

        # The X-Permitted-Cross-Domain-Policies header. If null, the header is not set.
        #permittedCrossDomainPolicies = "master-only"

        # The Content-Security-Policy header. If null, the header is not set.
        #contentSecurityPolicy = "default-src 'self'"
    }

    ## Allowed hosts filter configuration
    # https://www.playframework.com/documentation/latest/AllowedHostsFilter
    # ~~~~~
    # Play provides a filter that lets you configure which hosts can access your application.
    # This is useful to prevent cache poisoning attacks.
    hosts {
        # Allow requests to example.com, its subdomains, and localhost:9000.
        #allowed = [".example.com", "localhost:9000"]
    }
}
