## Filters
# https://www.playframework.com/documentation/2.7.x/Filters
# ~~~~~
# Remember to enable filters in build.sbt:
# libraryDependencies += filters

## Configure custom filters if need
#play.http.filters = "filters.HttpFilters"

## Enable filters: (manual setting the list of filters so that CORS stays before CSRF!)
play.filters.enabled = [
    play.filters.cors.CORSFilter
    play.filters.csrf.CSRFFilter
    play.filters.headers.SecurityHeadersFilter
    play.filters.hosts.AllowedHostsFilter
    play.filters.gzip.GzipFilter
]
## "play.filters.csrf.CSRFFilter", "play.filters.headers.SecurityHeadersFilter", "play.filters.hosts.AllowedHostsFilter" are enabled by default since Play! 2.6.x
#play.filters.enabled += "play.filters.cors.CORSFilter"
##play.filters.enabled += "play.filters.https.RedirectHttpsFilter"
#play.filters.enabled += "play.filters.gzip.GzipFilter"

play.filters {
    ## GZip filter configuration
    # https://www.playframework.com/documentation/2.7.x/GzipEncoding
    # ~~~~~
    gzip {
        compressionLevel = -1
        contentType {
            # If non empty, then a response will only be compressed if its content type is in this list.
            whiteList = [ "text/*", "application/javascript", "application/json" ]

            # The black list is only used if the white list is empty.
            # Compress all responses except the ones whose content type is in this list.
            blackList = []
        }
    }

    ## CORS filter configuration
    # https://www.playframework.com/documentation/2.7.x/CorsFilter
    # ~~~~~
    # CORS is a protocol that allows web applications to make requests from the browser
    # across different domains.
    # NOTE: You MUST apply the CORS configuration before the CSRF filter, as CSRF has
    # dependencies on CORS settings.
    cors {
        # Filter paths by a whitelist of path prefixes
        #pathPrefixes = ["/some/path", ...]

        # The allowed origins. If null, all origins are allowed.
        #allowedOrigins = ["http://www.example.com"]

        # The allowed HTTP methods. If null, all methods are allowed
        #allowedHttpMethods = ["GET", "POST"]
    }

    ## CSRF Filter
    # https://www.playframework.com/documentation/2.7.x/JavaCsrf#Applying-a-global-CSRF-filter
    # ~~~~~
    # Play supports multiple methods for verifying that a request is not a CSRF request.
    # The primary mechanism is a CSRF token. This token gets placed either in the query string
    # or body of every form submitted, and also gets placed in the users session.
    # Play then verifies that both tokens are present and match.
    csrf {
        # Sets the cookie to be sent only over HTTPS
        #cookie.secure = true

        # Defaults to CSRFErrorHandler in the root package.
        #errorHandler = MyCSRFErrorHandler
    }

    ## Security headers filter configuration
    # https://www.playframework.com/documentation/2.7.x/SecurityHeaders
    # ~~~~~
    # Defines security headers that prevent XSS attacks.
    # If enabled, then all options are set to the below configuration by default:
    headers {
        # The X-Frame-Options header. If null, the header is not set.
        #frameOptions = "DENY"

        # The X-XSS-Protection header. If null, the header is not set.
        #xssProtection = "1; mode=block"

        # The X-Content-Type-Options header. If null, the header is not set.
        #contentTypeOptions = "nosniff"

        # The X-Permitted-Cross-Domain-Policies header. If null, the header is not set.
        #permittedCrossDomainPolicies = "master-only"

        # The Content-Security-Policy header. If null, the header is not set.
        #contentSecurityPolicy = "default-src 'self'"
    }

    ## Allowed hosts filter configuration
    # https://www.playframework.com/documentation/2.7.x/AllowedHostsFilter
    # ~~~~~
    # Play provides a filter that lets you configure which hosts can access your application.
    # This is useful to prevent cache poisoning attacks.
    hosts {
        # Allow requests to example.com, its subdomains, and localhost:9000.
        #allowed = [".example.com", "localhost:9000"]
    }

    ## Redirect HTTPS filter configuration
    # https://www.playframework.com/documentation/2.7.x/RedirectHttpsFilter
    # ~~~~~
    # Play provides a filter which will redirect all HTTP requests to HTTPS automatically.
    https {
        # By default, the redirect only happens in Prod mode. To override this, set
        #redirectEnabled = true

        # Redirect code, default value 308, but can be overriden
        #redirectStatusCode = 301

        # If the HTTPS server is on a custom port, then the redirect URL needs to be aware of it. 
        #https.port = 9443
    }
}
